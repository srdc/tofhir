openapi: 3.0.2
info:
  description: "Lists the REST APIs provided by a toFHIR server"
  version: "1.1"
  title: "toFHIR REST API"

servers:
  - url: http://localhost:8085/tofhir
    description: Local deployment of the toFHIR server


tags:
  - name: "Terminology"
    description: "Represents a logical grouping for terminolgy entities with concept maps and code systems"
  - name: "Project"
    description: "Represents a logical grouping for project entities"
  - name: "Schema"
    description: "Represents a logical grouping for schema entities"
  - name: "Mapping"
    description: "Represents a logical grouping for mapping entities"
  - name: "Job"
    description: "Represents a logical grouping for job entities"
  - name: "Execution"
    description: "Represents a logical grouping for job execution entities"
  - name: "Mapping Context"
    description: "Represents a logical grouping for mapping context entities"
  - name: "Fhir Definition"
    description: "Represents a logical grouping for fhir definition entities"
  - name: "Fhir Path Functions"
    description: "Represents a logical grouping for fhir path function entities"
  - name: "File System Path"
    description: "Represents a logical grouping for file system path entities."
  - name: "Metadata"
    description: "Represents a logical grouping for metadata entities."
  - name: "REDCap"
    description: "Represents a logical grouping for REDCap function entities"


paths:

  # Beginning of the Terminology tag
  /terminologies:
    get:
      tags:
        - "Terminology"
      summary: "Gets all terminologies excluding their code systems and concept maps"
      operationId: "getTerminologies"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TerminologySystem"
                example: [{
                  "id": "test-id",
                  "name": "test-name",
                  "description": "test-description",
                  "conceptMaps": [],
                  "codeSystems": []
                }]

    post:
      tags:
        - "Terminology"
      summary: "Creates a new terminology"
      operationId: "createTerminology"
      requestBody:
        description: "Terminology details"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TerminologySystem"
      responses:
        '201':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TerminologySystem"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '409':
          $ref: '#/components/responses/409AlreadyExists'

  /terminologies/{terminologyId}:
    get:
      tags:
        - "Terminology"
      summary: "Gets the specified terminology"
      operationId: "getTerminology"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TerminologySystem"
        '404':
          $ref: "#/components/responses/404NotFound"

    put:
      tags:
        - "Terminology"
      summary: "Updates the specified terminology"
      operationId: "updateTerminology"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
      requestBody:
        description: "Terminology details"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TerminologySystem"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TerminologySystem"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'

    delete:
      tags:
        - "Terminology"
      summary: "Deletes the specified terminology"
      operationId: "deleteTerminology"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
      responses:
        '204':
          description: "Successful operation"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'

  /terminologies/{terminologyId}/concept-maps/:
    get:
      tags:
        - "Terminology"
      summary: "Gets all concept maps for the specified terminology"
      operationId: "getConceptMaps"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TerminologyConceptMap"

  /terminologies/{terminologyId}/concept-maps/{conceptMapId}:
    get:
      tags:
        - "Terminology"
      summary: "Gets the specified concept map for the specified terminology"
      operationId: "getConceptMap"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
        - $ref: "#/components/parameters/conceptMapId"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TerminologyConceptMap"
        '404':
          $ref: "#/components/responses/404NotFound"

  /terminologies/{terminologyId}/concept-maps/{conceptMapId}/content:
    get:
      tags:
        - "Terminology"
      summary: "Gets the paginated content of a specified concept map CSV for the specified terminology"
      operationId: "getConceptMapContent"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
        - $ref: "#/components/parameters/conceptMapId"
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: size
          schema:
            type: string
          required: false
      responses:
        '200':
          description: "Successful operation"
          content:
            text/csv:
              schema:
                type: string
                format: binary
                example: "source_system,source_code,target_system,target_code,target_display,equivalence\nhttp://terminology.hl7.org/CodeSystem/v2-0487,ACNE,http://snomed.info/sct,309068002,Specimen from skin,equivalent\nhttp://terminology.hl7.org/CodeSystem/v2-0487,ACNFLD,http://snomed.info/sct,119323008,Pus specimen,equivalent\nhttp://terminology.hl7.org/CodeSystem/v2-0487,ACNFLD,http://snomed.info/sct,119323009,Pus specimen 2,equivalent\nhttp://terminology.hl7.org/CodeSystem/v2-0487,BULLA,http://snomed.info/sct,258482009,Pus specimen 2,narrower"
        '404':
          $ref: "#/components/responses/404NotFound"

    post:
      tags:
        - "Terminology"
      summary: "Updates the paginated content of the specified concept map CSV for the specified terminology"
      operationId: "updateConceptMapContent"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
        - $ref: "#/components/parameters/conceptMapId"
        - in: query
          name: page
          schema:
            type: string
          required: false
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                # 'attachment' will be the field name in this multipart request
                attachment:
                  type: string
                  format: binary
      responses:
        '200':
          description: "Successful operation"
          content:
            text/plain:
              schema:
                type: string
                example: "OK"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: "#/components/responses/404NotFound"

  /terminologies/{terminologyId}/concept-maps/{conceptMapId}/header:
    post:
      tags:
        - "Terminology"
      summary: "Updates the header of the specified concept map CSV for the specified terminology"
      operationId: "updateConceptMapHeader"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
        - $ref: "#/components/parameters/conceptMapId"
      requestBody:
        description: "
          The array of CSV headers must include the following columns:
          `source_system`
          `source_code`
          `target_system`
          `target_code`
          Ensure that these column names are included as currentName in the array for a successful operation.
          Following columns are optional column names for concept maps:
          `target_display`
          `equivalence`
          Any other column name is forbidden for concept maps."
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/examples/CodeSystemCsvHeadersExample"
            examples:
              HeadersExample:
                $ref: "#/components/examples/ConceptMapCsvHeadersExample"
      responses:
        '200':
          description: "Successful operation"
          content:
            text/plain:
              schema:
                type: string
                example: "OK"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: "#/components/responses/404NotFound"

  /terminologies/{terminologyId}/concept-maps/{conceptMapId}/file:
    get:
      tags:
        - "Terminology"
      summary: "Gets the whole content of a specified concept map for the specified terminology"
      operationId: "getConceptMapFile"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
        - $ref: "#/components/parameters/conceptMapId"
      responses:
        '200':
          description: "Successful operation"
          content:
            text/csv:
              schema:
                type: string
                format: binary
                example: "source_system,source_code,target_system,target_code,target_display,equivalence\nhttp://terminology.hl7.org/CodeSystem/v2-0487,ACNE,http://snomed.info/sct,309068002,Specimen from skin,equivalent\nhttp://terminology.hl7.org/CodeSystem/v2-0487,ACNFLD,http://snomed.info/sct,119323008,Pus specimen,equivalent\nhttp://terminology.hl7.org/CodeSystem/v2-0487,ACNFLD,http://snomed.info/sct,119323009,Pus specimen 2,equivalent\nhttp://terminology.hl7.org/CodeSystem/v2-0487,BULLA,http://snomed.info/sct,258482009,Pus specimen 2,narrower"
        '404':
          $ref: "#/components/responses/404NotFound"

    post:
      tags:
        - "Terminology"
      summary: "Updates the whole content of the specified concept map for the specified terminology"
      operationId: "updateConceptMapFile"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
        - $ref: "#/components/parameters/conceptMapId"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                # 'attachment' will be the field name in this multipart request
                attachment:
                  type: string
                  format: binary
      responses:
        '200':
          description: "Successful operation"
          content:
            text/plain:
              schema:
                type: string
                example: "OK"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: "#/components/responses/404NotFound"

  /terminologies/{terminologyId}/code-systems:
    get:
      tags:
        - "Terminology"
      summary: "Gets the code systems for the specified terminology"
      operationId: "getCodeSystems"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TerminologyCodeSystem"
        '404':
          $ref: "#/components/responses/404NotFound"

  /terminologies/{terminologyId}/code-systems/{codeSystemId}:
    get:
      tags:
        - "Terminology"
      summary: "Gets the specified code system for the specified terminology"
      operationId: "getCodeSystem"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
        - $ref: "#/components/parameters/codeSystemId"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TerminologyCodeSystem"
        '404':
          $ref: "#/components/responses/404NotFound"

  /terminologies/{terminologyId}/code-systems/{conceptMapId}/content:
    get:
      tags:
        - "Terminology"
      summary: "Gets the paginated content of a specified code system CSV for the specified terminology"
      operationId: "getCodeSystemContent"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
        - $ref: "#/components/parameters/conceptMapId"
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: size
          schema:
            type: string
          required: false
      responses:
        '200':
          description: "Successful operation"
          content:
            text/csv:
              schema:
                type: string
                format: binary
                example: "source_system,source_code,target_system,target_code,target_display,equivalence\nhttp://terminology.hl7.org/CodeSystem/v2-0487,ACNE,http://snomed.info/sct,309068002,Specimen from skin,equivalent\nhttp://terminology.hl7.org/CodeSystem/v2-0487,ACNFLD,http://snomed.info/sct,119323008,Pus specimen,equivalent\nhttp://terminology.hl7.org/CodeSystem/v2-0487,ACNFLD,http://snomed.info/sct,119323009,Pus specimen 2,equivalent\nhttp://terminology.hl7.org/CodeSystem/v2-0487,BULLA,http://snomed.info/sct,258482009,Pus specimen 2,narrower"
        '404':
          $ref: "#/components/responses/404NotFound"

    post:
      tags:
        - "Terminology"
      summary: "Updates the paginated content of the specified code system CSV for the specified terminology"
      operationId: "updateCodeSystemContent"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
        - $ref: "#/components/parameters/conceptMapId"
        - in: query
          name: page
          schema:
            type: string
          required: false
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                # 'attachment' will be the field name in this multipart request
                attachment:
                  type: string
                  format: binary
      responses:
        '200':
          description: "Successful operation"
          content:
            text/plain:
              schema:
                type: string
                example: "OK"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: "#/components/responses/404NotFound"

  /terminologies/{terminologyId}/code-systems/{codeSystemId}/header:
    post:
      tags:
        - "Terminology"
      summary: "Updates the header of the specified code system CSV for the specified terminology"
      operationId: "getCodeSystemHeader"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
        - $ref: "#/components/parameters/codeSystemId"
      requestBody:
        description: "
          The array of CSV headers must include the following columns:
          `code`
          `display`
          Ensure that these column names are included as currentName in the array for a successful operation."
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CsvHeader"
            examples:
              HeadersExample:
                $ref: "#/components/examples/CodeSystemCsvHeadersExample"
      responses:
        '200':
          description: "Successful operation"
          content:
            text/plain:
              schema:
                type: string
                example: "OK"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: "#/components/responses/404NotFound"

  /terminologies/{terminologyId}/code-systems/{codeSystemId}/file:
    get:
      tags:
        - "Terminology"
      summary: "Gets the whole content for the specified code system for the specified terminology"
      operationId: "getCodeSystemFile"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
        - $ref: "#/components/parameters/codeSystemId"
      responses:
        '200':
          description: "Successful operation"
          content:
            text/csv:
              schema:
                type: string
                format: binary
                example: "code,display,fr,de\n309068002,Specimen from skin,Spécimen de peau,Probe von der Haut\n119323008,Pus specimen,Spécimen de pus,Eiterprobe"
        '404':
          $ref: "#/components/responses/404NotFound"

    post:
      tags:
        - "Terminology"
      summary: "Updates the whole content for the specified code system for the specified terminology"
      operationId: "updateCodeSystemFile"
      parameters:
        - $ref: "#/components/parameters/terminologyId"
        - $ref: "#/components/parameters/codeSystemId"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                # 'attachment' will be the field name in this multipart request
                attachment:
                  type: string
                  format: binary
      responses:
        '200':
          description: "Successful operation"
          content:
            text/plain:
              schema:
                type: string
                example: "OK"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: "#/components/responses/404NotFound"

  # Beginning of the Project tag
  /projects:
    get:
      tags:
        - "Project"
      summary: "Gets all projects"
      operationId: "getProjects"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"

    post:
      tags:
        - "Project"
      summary: "Creates a new project"
      operationId: "createProject"
      requestBody:
        description: "Project details"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        '201':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '409':
          $ref: '#/components/responses/409AlreadyExists'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'

  /projects/{projectId}:
    get:
      tags:
        - "Project"
      summary: "Gets the specified project"
      operationId: "getProject"
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        '404':
          $ref: '#/components/responses/404NotFound'

    patch:
      tags:
        - "Project"
      summary: "Updates the description, schemaUrlPrefix and mappingUrlPrefix project with the given patch"
      operationId: "patchProject"
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        description: "description, schemaUrlPrefix and mappingUrlPrefix"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchProjectSchema"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'

    delete:
      tags:
        - "Project"
      summary: "Deletes the specified project"
      operationId: "deleteProject"
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        '204':
          description: "Successful operation"
        '404':
          $ref: '#/components/responses/404NotFound'

  # Beginning the Schema Tag
  /projects/{projectId}/schemas:
    get:
      tags:
        - Schema
      summary: Gets all schemas in a project
      description: "If schema url parameter is given, gets the specified schema otherwise gets all schemas"
      operationId: getSchemas
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/schemaUrl'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SchemaDefinition"

    post:
      tags:
        - Schema
      summary: Creates the given schema in a project
      operationId: createSchema
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/format'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/Resource"
                - $ref: "#/components/schemas/SchemaDefinition"
            examples:
              SimpleStructureDefinitionExample:
                $ref: "#/components/examples/SimpleStructureDefinitionExample"
              StructureDefinitionExample:
                $ref: "#/components/examples/StructureDefinitionExample"
        description: Schema data to be created
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaDefinition"

  /projects/{projectId}/schemas/{schemaId}:
    get:
      tags:
        - Schema
      summary: Gets the specified schema in the project
      operationId: getSchema
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/schemaId'
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaDefinition"
        '404':
          $ref: '#/components/responses/404NotFound'

    put:
      tags:
        - Schema
      summary: Updates the schema with the given body
      operationId: putSchema
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/schemaId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaDefinition"
        description: Updated schema data
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaDefinition"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'

    delete:
      tags:
        - Schema
      summary: Deletes the specified schema
      operationId: deleteSchema
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/schemaId'
      responses:
        '204':
          description: Successful operation
        '404':
          $ref: '#/components/responses/404NotFound'

  /projects/{projectId}/schemas/infer:
    post:
      tags:
        - Schema
      summary: Infers a schema from the given data
      operationId: inferSchema
      parameters:
        - $ref: "#/components/parameters/projectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InferTask"
        description: Data for schema inference
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaDefinition"
        '400':
          $ref: '#/components/responses/400BadRequest'

  /projects/{projectId}/schemas/redcap:
    post:
      tags:
        - Schema
      summary: Gets the REDCap Data Dictionary file
      operationId: importREDCapDataDictionary
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/rootUrl'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                # 'attachment' will be the field name in this multipart request
                attachment:
                  type: string
                  format: binary
        description: REDCap data dictionary file and root URL
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SchemaDefinition"
        '400':
          $ref: '#/components/responses/400BadRequest'
  
  /projects/{projectId}/schemas/import:
    post:
      tags:
        - Schema
      summary: Imports a schema from the specified FHIR server using the provided settings.
      operationId: importFhirProfile
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportSchemaSettings"
            examples:
              ImportSchemaSettings:
                $ref: '#/components/examples/ImportSchemaSettingsExample'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SchemaDefinition"
        '400':
          $ref: '#/components/responses/400BadRequest'
  
  /projects/{projectId}/schemas/import-zip:
    post:
      tags:
        - Schema
      summary: Import FHIR profiles (structure definitions) from a ZIP file uploaded to the server.
      operationId: importFhirProfileFromZip
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "The ZIP file containing FHIR structure definitions."
        description: "Upload a ZIP file containing FHIR structure definitions for schema import."
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SchemaDefinition"


  # Beginning of the Mappings tag
  /projects/{projectId}/mappings:
    get:
      tags:
        - Mapping
      summary: Gets all mappings in the project
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FhirMapping"
        '400':
          $ref: '#/components/responses/400BadRequest'

    post:
      tags:
        - Mapping
      summary: Creates a mapping in the project
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FhirMapping"
        description: Fhir mappping to be created
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FhirMapping"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '409':
          $ref: '#/components/responses/409AlreadyExists'

  /projects/{projectId}/mappings/{mappingId}:
    get:
      tags:
        - Mapping
      summary: Gets the specified mapping
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/mappingId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FhirMapping"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'

    put:
      tags:
        - Mapping
      summary: Updates the mapping with the given body
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/mappingId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FhirMapping"
        description: Fhir mappping to update current mapping
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FhirMapping"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '404':
          $ref: '#/components/responses/404NotFound'

    delete:
      tags:
        - Mapping
      summary: Deletes the specified mapping
      operationId: deleteMapping
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/mappingId'
      responses:
        '204':
          description: Successful operation
        '404':
          $ref: '#/components/responses/404NotFound'

  # Beginning of the Job tag
  /projects/{projectId}/jobs:
    get:
      tags:
        - Job
      summary: Gets all mapping jobs in the project
      parameters:
        - $ref: "#/components/parameters/projectId"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FhirMappingJob"
        '400':
          $ref: '#/components/responses/400BadRequest'

    post:
      tags:
        - Job
      summary: Creates a new mapping job
      parameters:
        - $ref: "#/components/parameters/projectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FhirMappingJob"
            examples:
              FhirMappingJobExample:
                $ref: "#/components/examples/FhirMappingJobExample"
        description: Fhir mappping job to be created
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FhirMappingJob"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'

  /projects/{projectId}/jobs/{jobId}:
    get:
      tags:
        - Job
      summary: Gets the specified mapping job
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/jobId"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FhirMappingJob"
        '404':
          $ref: '#/components/responses/404NotFound'

    put:
      tags:
        - Job
      summary: Updates the mapping job with the given body
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/jobId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FhirMappingJob"
            examples:
              FhirMappingJobExample:
                $ref: "#/components/examples/FhirMappingJobExample"
      responses:
        '200':
          description: Mapping job updated successfully
        '404':
          $ref: '#/components/responses/404NotFound'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'

    delete:
      tags:
        - Job
      summary: Deletes the mapping job
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/jobId"
      responses:
        '204':
          description: Mapping job deleted successfully
        '400':
          description: The running mapping jobs cannot be deleted
        '404':
          $ref: '#/components/responses/404NotFound'

  /projects/{projectId}/jobs/{jobId}/run:
    post:
      tags:
        - Job
      summary: Runs the mapping job
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: '#/components/parameters/jobId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecuteJobTask"
      responses:
        '200':
          description: Job execution started successfully
        '400':
          $ref: "#/components/responses/400BadRequest"

  /projects/{projectId}/jobs/{jobId}/status:
    get:
      tags:
        - Job
      summary: Checks whether the mapping job is running or not
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: '#/components/parameters/jobId'
      responses:
        '200':
          description: Mapping job is running
        '404':
          description: Mapping job not found or not running

  /projects/{projectId}/jobs/{jobId}/test:
    post:
      tags:
        - Job
      summary: Tests the mapping job with the given configurations
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/jobId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestResourceCreationRequest"
      responses:
        '200':
          description: Test completed successfully

  # Beginning of the Execution tag
  /projects/{projectId}/jobs/{jobId}/executions:
    get:
      tags:
        - Execution
      summary: Gets executions of the mapping job
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/jobId"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Execution"

    delete:
      tags:
        - Execution
      summary: Stops all executions of the mapping job
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/jobId"
      responses:
        '200':
          description: Executions stopped successfully
        '404':
          $ref: "#/components/responses/404NotFound"

  /projects/{projectId}/jobs/{jobId}/executions/{executionId}/run:
    post:
      tags:
        - Execution
      summary: Continues the job execution
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/jobId"
        - $ref: "#/components/parameters/executionId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecuteJobTask"
      responses:
        '200':
          description: Job execution runned successfully

  /projects/{projectId}/jobs/{jobId}/executions/{executionId}/stop:
    delete:
      tags:
        - Execution
      summary: Stops the job execution
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/jobId"
        - $ref: "#/components/parameters/executionId"
      responses:
        '200':
          description: Job execution stopped successfully
  
  /projects/{projectId}/jobs/{jobId}/executions/{executionId}/deschedule:
    delete:
      tags:
        - Execution
      summary: Stops the scheduled job execution
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/jobId"
        - $ref: "#/components/parameters/executionId"
      responses:
        '200':
          description: Job execution descheduled successfull

  /projects/{projectId}/jobs/{jobId}/executions/{executionId}/mappings/{mappingTaskName}/stop:
    delete:
      tags:
        - Execution
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/jobId"
        - $ref: "#/components/parameters/executionId"
        - $ref: "#/components/parameters/mappingTaskName"
      summary: Stops the individual mapping task inside the job
      responses:
        '200':
          description: Mapping execution stopped successfully

  # Beginning of the Mapping Context tag
  /projects/{projectId}/mapping-contexts:
    get:
      tags:
        - Mapping Context
      summary: Gets all mapping contexts in the project
      parameters:
        - $ref: "#/components/parameters/projectId"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              example:
                ["anesthesia-observations-concept-map.csv",
                 "anesthesia-procedures-concept-map.csv",
                 "anesthesia-types-concept-map.csv"]

    post:
      tags:
        - Mapping Context
      summary: Creates a new mapping context
      parameters:
        - $ref: "#/components/parameters/projectId"
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              example: "anesthesia-types-concept-map.csv"
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                example: "anesthesia-types-concept-map.csv"
        '400':
          $ref: "#/components/responses/400BadRequest"

  /projects/{projectId}/mapping-contexts/{mappingContextId}:
    delete:
      tags:
        - Mapping Context
      summary: Deletes the mapping context
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/mappingContextId"
      responses:
        '204':
          description: No content
        '404':
          $ref: "#/components/responses/404NotFound"

  /projects/{projectId}/mapping-contexts/{mappingContextId}/content:
    get:
      tags:
        - "Mapping Context"
      summary: "Gets the paginated content of a mapping context CSV"
      operationId: "getMappingContextContent"
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/mappingContextId"
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: size
          schema:
            type: string
          required: false
      responses:
        '200':
          description: "Successful operation"
          content:
            text/csv:
              schema:
                type: string
                format: binary
                example: "source_system,source_code,target_system,target_code,target_display,equivalence\nhttp://terminology.hl7.org/CodeSystem/v2-0487,ACNE,http://snomed.info/sct,309068002,Specimen from skin,equivalent\nhttp://terminology.hl7.org/CodeSystem/v2-0487,ACNFLD,http://snomed.info/sct,119323008,Pus specimen,equivalent\nhttp://terminology.hl7.org/CodeSystem/v2-0487,ACNFLD,http://snomed.info/sct,119323009,Pus specimen 2,equivalent\nhttp://terminology.hl7.org/CodeSystem/v2-0487,BULLA,http://snomed.info/sct,258482009,Pus specimen 2,narrower"
        '404':
          $ref: "#/components/responses/404NotFound"

    post:
      tags:
        - "Mapping Context"
      summary: "Updates the paginated content of a mapping context CSV"
      operationId: "updateMappingContextContent"
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/mappingContextId"
        - in: query
          name: page
          schema:
            type: string
          required: false
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                # 'attachment' will be the field name in this multipart request
                attachment:
                  type: string
                  format: binary
      responses:
        '200':
          description: "Successful operation"
          content:
            text/plain:
              schema:
                type: string
                example: "OK"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: "#/components/responses/404NotFound"

  /projects/{projectId}/mapping-contexts/{mappingContextId}/header:
    post:
      tags:
        - "Mapping Context"
      summary: "Updates the header of mapping context CSV. This request must include all headers of the csv content. Otherwise, data may be lost."
      operationId: "updateMappingContextHeader"
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/mappingContextId"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            examples:
              HeaderExample:
                $ref: "#/components/examples/ConceptMapCsvHeadersExample"
      responses:
        '200':
          description: "Successful operation"
          content:
            text/plain:
              schema:
                type: string
                example: "OK"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: "#/components/responses/404NotFound"


  /projects/{projectId}/mapping-contexts/{mappingContextId}/file:
    post:
      tags:
        - Mapping Context
      summary: Uploads the given mapping context file
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/mappingContextId"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                attachment:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded successfully
        '400':
          description: Bad request

    get:
      tags:
        - Mapping Context
      summary: Downloads the mapping context file
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/mappingContextId"
      responses:
        '200':
          description: File downloaded successfully
          content:
            text/csv:
              schema:
                type: string
                format: binary
                example: "source_code,source_system,source_display\n50697003,http://snomed.info/sct,General Anesthesia\n386761002,http://snomed.info/sct,Local Anesthesia\n27372005,http://snomed.info/sct,Regional Anesthesia\n231249005,http://snomed.info/sct,Spinal Anesthesia\n88815003,http://snomed.info/sct,Peripheral block anesthesia\n26402001,http://snomed.info/sct,Nerve block anesthesia\n72641008,http://snomed.info/sct,Sedation"
        '404':
          $ref: "#/components/responses/404NotFound"

  # Beginning of the Fhir Definition tag
  /fhir-definitions:
    get:
      tags:
        - Fhir Definition
      summary: Gets FHIR Definitions
      parameters:
        - $ref: "#/components/parameters/q"
        - $ref: "#/components/parameters/rtype"
        - $ref: "#/components/parameters/profile"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleStructureDefinition'
        '400':
          $ref: "#/components/responses/400BadRequest"

  /validate:
    post:
      tags:
        - Fhir Definition
      summary: Validates the FHIR resource whose validation url is given
      parameters:
        - $ref: "#/components/parameters/fhirValidationUrl"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Resource"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
              examples:
                FhirValidationExample:
                  $ref: "#/components/examples/FhirValidationExample"
        '400':
          description: Missing query parameter
        '500':
          description: Proxy request failed

  /base-profiles:
    get:
      tags:
        - Fhir Definition
      summary: Gets FHIR Definitions
      description: If a specific profile is provided as a query parameter, the response will include only that profile's definition. If no profile is specified, the response will contain all base profiles for the given FHIR version.
      parameters:
        - $ref: "#/components/parameters/fhirVersion"
        - $ref: "#/components/parameters/profile"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleStructureDefinition'
        '400':
          $ref: "#/components/responses/400BadRequest"

  # Beginning of the Fhir Path Functions tag
  /fhir-path-functions:
    get:
      tags:
        - Fhir Path Functions
      summary: Returns the documentations of Fhir path functions
      parameters:
        - $ref: '#/components/parameters/base_path'
        - $ref: '#/components/parameters/include_files'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FhirPathFunction"
              examples:
                FhirPathFunctionsExample:
                  $ref: "#/components/examples/FhirPathFunctionsExample"

  # Beginning of the File System Path tag
  /file-system-path:
    get:
      tags:
        - File System Path
      summary: Returns a tree structure of the file system, with the root being the context path where toFHIR runs.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilePathNode"
              examples:
                FilePathNodeExample:
                  $ref: "#/components/examples/FilePathNodeExample"

  # Beginning of the metadata tag
  /metadata:
    get:
      tags:
        - Metadata
      summary: Return metadata information of the server including version, config etc.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metadata"
              examples:
                MetadataExample:
                  $ref: "#/components/examples/MetadataExample"

  # Beginning of the REDCap tag
  /redcap:
    get:
      summary: Retrieve REDCap Projects
      description: Retrieves the list of REDCap project configurations from the tofhir-redcap service.
      operationId: getRedCapProjects
      tags:
        - REDCap
      responses:
        '200':
          description: A list of REDCap projects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RedCapProjectConfig'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      summary: Save REDCap Projects
      description: |
        Saves the provided REDCap project configurations to the tofhir-redcap service.
      operationId: saveRedCapProjects
      tags:
        - REDCap
      requestBody:
        description: List of REDCap project configurations to save.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RedCapProjectConfig'
      responses:
        '200':
          description: Projects saved successfully.
          content:
            application/json:
              schema:
                type: string
                example: "Projects saved successfully."
        '400':
          $ref: '#/components/responses/400BadRequest'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /redcap/{projectId}:
    delete:
      summary: Delete REDCap data of the project
      description: |
        Deletes the REDCap data of the project from the Kafka topics
      operationId: deleteRedCapData
      tags:
        - REDCap
      parameters:
        - $ref: "#/components/parameters/projectId"
        - in: query
          name: "reload"
          schema:
            type: boolean
          description: "Whether to reload REDCap records into to Kafka topics or not"
      responses:
        '200':
          description: Project's data deleted successfully.
          content:
            application/json:
              schema:
                type: string
                example: "Project's data deleted successfully."
  /redcap/notification:
    get:
      summary: Retrieve REDCap Notification URL
      description: |
        Fetches the notification URL used by the REDCap project. The source of this URL is configured in the tofhir-redcap service.

      operationId: getNotificationUrl
      tags:
        - REDCap
      responses:
        '200':
          description: Notification URL returned successfully.
          content:
            text/plain:
              schema:
                type: string
                example: "https://example.com/redcap/notification"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'


components:
  # Type definitions for the objects used
  schemas:
    TerminologySystem:
      type: object
      required:
        - name
        - description
      properties:
        id:
          type: string
          description: "Identifier of the terminology system"
        name:
          type: string
          description: "Name of the terminology system"
          example: "T-System Example"
        description:
          type: string
          description: "Description of the terminology system"
          example: "SNOMED CT is a terminology system for clinical health care"
        conceptMaps:
          type: array
          items:
            $ref: "#/components/schemas/TerminologyConceptMap"
          description: "URL of the terminology system"
        codeSystems:
          type: array
          items:
            $ref: "#/components/schemas/TerminologyCodeSystem"
          description: "Version of the terminology system"

    TerminologyConceptMap:
      type: object
      required:
        - name
        - conceptMapUrl
        - sourceValueSetUrl
        - targetValueSetUrl
      properties:
        id:
          type: string
          description: "Identifier of the terminology concept map"
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        name:
          type: string
          description: "Name of the terminology concept map"
          example: "CoonceptMap"
        conceptMapUrl:
          type: string
          description: "URL of the terminology concept map"
          example: "http://example.com/fhir/ConceptMap/sample1"
        sourceValueSetUrl:
          type: string
          description: "URL of the source value set"
          example: "http://terminology.hl7.org/ValueSet/v2-0487"
        targetValueSetUrl:
          type: string
          description: "URL of the target value set"
          example: "http://snomed.info/sct?fhir_vs"

    TerminologyCodeSystem:
      type: object
      required:
        - name
        - codeSystemUrl
        - valueSetUrl
      properties:
        id:
          type: string
          description: "Identifier of the terminology code system"
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        name:
          type: string
          description: "Name of the terminology code system"
          example: "CodeSystem"
        codeSystem:
          type: string
          description: "Code system of the terminology code system"
          example: "http://snomed.info/sct"

    Project:
      type: "object"
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: "Unique identifier for the project. First given name to the project is used as id."
          example: "projectName"
        name:
          type: string
          description: "Name of the project."
          example: "ProjectName"
        description:
          type: string
          description: "A detailed description of the project."
          example: "This project is aimed at ..."
        schemaUrlPrefix:
          type: string
          description: "Prefix (beginning) of the URLs to be used while creating schema definitions within this project."
          example: "https://aiccelerate.eu/fhir/StructureDefinition/"
        mappingUrlPrefix:
          type: string
          description: "Prefix (beginning) of the URLs to be used while creating mapping definitions within this project."
          example: "https://aiccelerate.eu/fhir/mappings/pilot1/"
        schemas:
          type: array
          description: "List of schema definitions associated with the project."
          items:
            $ref: "#/components/schemas/SchemaDefinition"
          example: []
        mappings:
          type: array
          description: "List of mapping definitions associated with the project."
          items:
            $ref: "#/components/schemas/FhirMapping"
          example: []
        mappingContext:
          type: array
          description: "List of identifiers for mapping contexts defined in this project."
          items:
            type: string
          example: []
        mappingJobs:
          type: array
          description: "List of mapping jobs defined in this project."
          items:
            $ref: "#/components/schemas/FhirMappingJob"
          example: []

    SchemaDefinition:
      type: "object"
      required:
        - "url"
        - "type"
        - "name"
      properties:
        id:
          type: "string"
          description: "Identifier of the schema"
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        url:
          type: "string"
          description: "Url of the schema"
          example: "https://aiccelerate.eu/fhir/StructureDefinition/Schema-id"
        version:
          description: "Major FHIR version (must be either R4 or R5)"
          type: string
          enum:
            - R4
            - R5
        type:
          type: "string"
          description: "Type of the schema"
          example: "Schema-id"
        description:
          type: "string"
          description: "Description of the schema"
          example: "Sample description"
        name:
          type: "string"
          description: "Name of the schema"
          example: "Schema-id"
        rootDefinition:
          example: {}

        fieldDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/SimpleStructureDefinition'
          example:
            $ref: '#/components/examples/SchemaFieldDefinitionsExample'

    SimpleStructureDefinition:
      type: "object"
      required:
        - "id"
        - "path"
        - "isPrimitive"
        - "isChoiceRoot"
        - "isArray"
        - "minCardinality"
      properties:
        id:
          type: string
        path:
          type: string
        version:
          type: string
          enum:
            - R4
            - R5
        dataTypes:
          type: array
          items:
            $ref: '#/components/schemas/DataTypeWithProfiles'
        isPrimitive:
          type: boolean
        isChoiceRoot:
          type: boolean
        isArray:
          type: boolean
        minCardinality:
          type: integer
        maxCardinality:
          type: integer
        boundToValueSet:
          type: string
        isValueSetBindingRequired:
          type: boolean
        referencableProfiles:
          type: array
          items:
            type: string
        constraintDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/ConstraintDefinition'
        sliceDefinition:
          $ref: '#/components/schemas/SliceDefinition'
        sliceName:
          type: string
        fixedValue:
          type: string
        patternValue:
          type: string
        referringTo:
          type: string
        short:
          type: string
        definition:
          type: string
        comment:
          type: string
        elements:
          type: array
          items:
            $ref: '#/components/schemas/SimpleStructureDefinition'

    DataTypeWithProfiles:
      type: "object"
      required:
        - "dataType"
      properties:
        dataType:
          type: "string"
        profiles:
          type: array
          items:
            type: string

    ConstraintDefinition:
      type: object
      required:
        - key
        - desc
        - isWarning
      properties:
        key:
          type: string
        desc:
          type: string
        isWarning:
          type: boolean

    SliceDefinition:
      type: object
      required:
        - discriminators
        - ordered
        - rule
      properties:
        discriminators:
          type: array
          items:
            $ref: '#/components/schemas/SliceDiscriminator'
        ordered:
          type: boolean
        rule:
          type: string

    SliceDiscriminator:
      type: object
      required:
        - type
        - path
      properties:
        type:
          type: string
        path:
          type: string

    Resource:
      type: object
      required:
        - url
        - type
      properties:
        id:
          type: "string"
          description: "Identifier of the schema"
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        url:
          type: "string"
          description: "Url of the schema"
          example: "https://aiccelerate.eu/fhir/StructureDefinition/Ext-plt1-anesthesia-observations"
        resourceType:
          type: "string"
          description: "Resource type of the schema"
          example: "Ext-plt1-anesthesia-observations"
        name:
          type: "string"
          description: "Name of the schema"
          example: "Ext-plt1-anesthesia-observations"
        status:
          type: "string"
          description: "Publication status of the StructureDefinition"
          example: "draft"
        fhirVersion:
          type: "string"
          description: "version of the FHIR standart"
          example: "4.0.1"
        kind:
          type: "string"
          description: "Kind of the Structure Definition"
          example: "logical"
        abstract:
          type: "boolean"
          description: "Indicates whether this StructureDefinition represents an abstract type"
          example: false
        baseDefinition:
          type: "string"
          description: "Specifies the base or foundational definition upon which this StructureDefinition is built"
          example: "http://hl7.org/fhir/StructureDefinition/Element"
        derivation:
          type: "string"
          description: "The method by which this StructureDefinition is derived"
          example: "specialization"
        differential:
          properties:
            element:
              type: "array"
              items:
                $ref: "#/components/schemas/ElementDefinition"

    ElementDefinition:
      type: object
      description: "The definition of an element in a resource or an extension"
      properties:
        id:
          type: string
        path:
          type: string
        min:
          type: string
        max:
          type: string
        definition:
          type: string
        short:
          type: string
        type:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
              profile:
                type: array
                items:
                  type: string

    InferTask:
      type: object
      properties:
        name:
          type: string
          description: "Name for source binding"
          example: "source"
        mappingJobSourceSettings:
          type: object
          properties:
            source:
              oneOf:
                - $ref: '#/components/schemas/FileSystemSourceSettings'
                - $ref: '#/components/schemas/SqlSourceSettings'
        sourceBinding:
          oneOf:
            - $ref: "#/components/schemas/FileSystemSource"
            - $ref: "#/components/schemas/SqlSource"
      required:
        - name
        - sourceSettings
        - mappingJobSourceSettings

    SourceSettings:
      type: object
      description: Array including data sources of the job
      additionalProperties:
        oneOf:
          - $ref: "#/components/schemas/FileSystemSourceSettings"
          - $ref: "#/components/schemas/SqlSourceSettings"
          - $ref: "#/components/schemas/KafkaSourceSettings"
          - $ref: "#/components/schemas/FhirServerSourceSettings"

    MappingJobSourceSettings:
      type: object
      description: Interface for data source settings/configurations of a mapping job
      properties:
        name:
          type: string
          description: Human friendly name for the source organization for data source
          example: "source"
        sourceUri:
          type: string
          description: Computer friendly canonical url indicating the source of the data (May be used for Resource.meta.source)
          example: "https://aiccelerate.eu/data-integration-suite/test-data"
        asStream:
          type: boolean
          description: Whether the data is coming in streaming mode
          example: false
        jsonClass:
          type: string
          description: "Indicates the type of the data source (ex: FileSystemSourceSettings)"
          enum:
            - FileSystemSourceSettings
            - SqlSourceSettings
            - KafkaSourceSettings
            - FhirServerSourceSettings

    FileSystemSourceSettings:
      description: "Context/configuration for the source of the mapping-job that will read the source data from a file system"
      allOf:
        - $ref: '#/components/schemas/MappingJobSourceSettings'
        - type: object
          properties:
            dataFolderPath:
              type: string
              description: "The data folder path of the file source"
              example: "test-data/pilot1"
          required:
            - dataFolderPath
    SqlSourceSettings:
      description: "Context/configuration for the source of the mapping-job that will read the source data from a SQL source"
      allOf:
        - $ref: '#/components/schemas/MappingJobSourceSettings'
        - type: object
          properties:
            databaseUrl:
              type: string
              description: "Connection URL of the SQL database"
              example: "jdbc:postgresql://localhost:5432/db_name"
            username:
              type: string
              description: "Username of the SQL database"
              example: "postgres"
            password:
              type: string
              description: "Password of the SQL database"
              example: "postgres"
          required:
            - databaseUrl
            - username
            - password
    KafkaSourceSettings:
      description: "Context/configuration for the source of the mapping-job that will read the source data from Kafka as a stream"
      allOf:
        - $ref: '#/components/schemas/MappingJobSourceSettings'
        - type: object
          properties:
            bootstrapServers:
              type: string
              description: "Kafka bootstrap server(s) with port, may be comma-separated list (localhost:9092,localhost:9091)"
            asRedCap:
              type: boolean
              description: "Indicate whether it is a RedCap source"
          required:
            - bootstrapServers
    FhirServerSourceSettings:
      description: "Context/configuration for the source of the mapping-job that will read the source data from a FHIR server"
      allOf:
        - $ref: '#/components/schemas/MappingJobSourceSettings'
        - type: object
          properties:
            serverUrl:
              type: string
              description: "URL of the FHIR server"
              example: "https://fhir.example.com"
            securitySettings:
              oneOf:
                - $ref: "#/components/schemas/BearerTokenAuthorizationSettings"
                - $ref: "#/components/schemas/BasicAuthenticationSettings"
                - $ref: "#/components/schemas/FixedTokenAuthenticationSettings"
          required:
            - serverUrl

    MappingSourceBinding:
      type: object
      properties:
        jsonClass:
          type: string
          enum:
            - FileSystemSource
            - SqlSource
            - KafkaSource
            - FhirServerSource
          description: "Indicates the type of the mapping (e.g., FileSystemSource, SqlSource, KafkaSource)"
        preprocessSql:
          type: string
          description: "Indicates preprocess SQL query"
          example: "null"
        sourceRef:
          type: string
          description: "Reference to the source specified in the sourceSettings of a mapping job."
          example: "source1"
      required:
        - jsonClass
        - preprocessSql
        - sourceRef

    FileSystemSource:
      description: "Defines file system source configurations of a mapping in the mapping-job"
      allOf:
        - $ref: '#/components/schemas/MappingSourceBinding'
        - type: object
          properties:
            path:
              type: string
              description: "File path to the source file or folder, e.g., 'patients.csv' or 'patients'."
              example: "patients.csv"
            contentType:
              type: string
              enum:
                - csv
                - tsv
                - parquet
                - json
              description: "Content type of configured file inside of the data folder"
            options:
              $ref: "#/components/schemas/SparkOptions"
          required:
            - path

    SqlSource:
      description: "Defines SQL source configurations of a mapping in the mapping-job"
      allOf:
        - $ref: '#/components/schemas/MappingSourceBinding'
        - type: object
          properties:
            tableName:
              type: string
              description: "Table name of the SQL source"
              example: "table1"
            query:
              type: string
              description: "Query to execute in the database"
              example: "SELECT * FROM table1"
            options:
              $ref: "#/components/schemas/SparkOptions"
          required:
            - tableName
            - query

    KafkaSource:
      description: "Defines Kafka source configurations of a mapping in the mapping-job"
      allOf:
        - $ref: '#/components/schemas/MappingSourceBinding'
        - type: object
          properties:
            topicName:
              type: string
              description: "Topic(s) to subscribe to, may be comma-separated string list (topic1,topic2)"
            options:
              $ref: "#/components/schemas/SparkOptions"
          required:
            - topicName

    FhirServerSource:
      description: "Defines FHIR server source configurations of a mapping in the mapping-job"
      allOf:
        - $ref: '#/components/schemas/MappingSourceBinding'
        - type: object
          properties:
            resourceType:
              type: string
              description: "Type of FHIR resource to query."
              example: "Patient"
            query:
              type: string
              description: "Optional query string to filter the FHIR resources."
              example: "gender=male"
          required:
            - resourceType

    FhirMapping:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the mapping
          example: "anesthesia-observations-mapping"
        url:
          type: string
          description: Canonical URL for the mapping
          example: "https://aiccelerate.eu/fhir/mappings/pilot1/anesthesia-observations-mapping"
        name:
          type: string
          description: Computer-friendly name
          example: "anesthesia-observations-mapping"
        title:
          type: string
          description: Human-friendly title
          example: "Mapping of schema anesthesia observations symptoms to AIC-AnesthesiaObservation profile resources"
        description:
          type: string
          description: Description of the mapping
          example: ""
        source:
          type: array
          items:
            $ref: "#/components/schemas/FhirMappingSource"
          description: Metadata about source for the mapping
        variable:
          type: array
          items:
            $ref: "#/components/schemas/FhirExpression"
          description: "Common variables calculated from source data to use in the mappings"
        mapping:
          type: array
          items:
            $ref: "#/components/schemas/FhirMappingExpression"
          description: Mapping scripts
        context:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/FhirMappingContextDefinition"
          description: "Further context to use for mapping evaluation e.g., ConceptMap for terminology mapping, definition of unit conversion functions"
      required:
        - id
        - url
        - name

    FhirMappingExpression:
      type: object
      properties:
        description:
          type: string
          example: Sample description
        precondition:
          allOf:
            - $ref: "#/components/schemas/FhirExpression"
          description: A precondition FHIR expression for this mapping
        expression:
          allOf:
            - $ref: "#/components/schemas/FhirExpression"
          description: FHIR expression that defines the mappinge
          example:
            $ref: "#/components/examples/FhirExpressionExample/value"
        fhirInteraction:
          allOf:
            - $ref: "#/components/schemas/FhirInteraction"
          description: "Provides information about the FHIR Interaction to persist the mapped information. If not given FHIR Update interaction is used and the mapped content is expected to be a FHIR resource."
      required:
        - expression

    FhirExpression:
      type: object
      properties:
        name:
          type: string
          description: Name of the expression
          example: "encType"
        language:
          type: string
          description: Language of the expression
          example: "text/fhirpath"
        expression:
          type: string
          description: Expression string
          example: "type.utl:split('-').first()"
        reference:
          type: string
          description: Reference to the expression
        value:
          type: object
          description: Defined value of the expression
      required:
        - name
        - language

    FhirMappingSource:
      type: object
      properties:
        alias:
          type: string
          description: "Name of the source to be used in expressions"
          example: "source"
        url:
          type: string
          description: "URL to the StructureDefinition of the source format"
          example: "https://aiccelerate.eu/fhir/StructureDefinition/Ext-plt1-anesthesia-observations"
        joinOn:
          type: array
          items:
            type: string
          description: "Columns to use from this source data while joining the multiple sources"
        description:
          type: string
          description: "Description of the source"
      required:
        - alias
        - url

    FhirMappingContextDefinition:
      type: object
      properties:
        category:
          type: string
          description: Category of context
          example: "concept-map"
        url:
          type: string
          description: URL if context data will be loaded from a URL
          example: "$CONTEXT_REPO/pilot1/anesthesia-observations-concept-map.csv"
        value:
          type: object
          description: Value if context data will be supplied as JSON content
        description:
          type: string
          description: Description of the context data
      required:
        - category

    FhirInteraction:
      type: object
      description: "Provides the details about FHIR interaction to persist the new information"
      properties:
        type:
          type: string
          description: "FHIR interaction type e.g. create | update | patch"
          example: "create"
        rid:
          type: string
          description: "Only required for FHIR Patch and provides either FHIR resource locator"
          example: "Observation/315653"
        condition:
          type: string
          description: "FHIR search statement indicating the condition to update or create"
      required:
        - type

    FhirMappingJob:
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier for the mapping job"
          example: "pilot-example"
        name:
          type: string
          description: "The name given by the user"
          example: "Pilot-example"
        sourceSettings:
          $ref: "#/components/schemas/SourceSettings"
        sinkSettings:
          $ref: "#/components/schemas/FhirSinkSettings"
        terminologyServiceSettings:
          oneOf:
            - $ref: "#/components/schemas/LocalFhirTerminologyServiceSettings"
            - $ref: "#/components/schemas/FhirRepositorySinkSettings"
        identityServiceSettings:
          $ref: "#/components/schemas/FhirRepositorySinkSettings"
        mappings:
          type: array
          items:
            $ref: "#/components/schemas/MappingTask"
        schedulingSettings:
          $ref: "#/components/schemas/SchedulingSettings"
        dataProcessingSettings:
          $ref: "#/components/schemas/DataProcessingSettings"
        useFhirSinkAsIdentityService:
          type: boolean
          description: If true it means the FHIR repository to write the mapped resources where the configuration is given in sink settings will be used as identity service (Override identityServiceSettings if given)
          example: false
      required:
        - id
        - sinkSettings
        - sourceSettings
        - mappings

    FhirSinkSettings:
      type: object
      description: "Common interface for sink settings"
      oneOf:
        - $ref: "#/components/schemas/FileSystemSinkSettings"
        - $ref: "#/components/schemas/FhirRepositorySinkSettings"

    FileSystemSinkSettings:
      type: object
      description: "Settings to write mapped FHIR resources to file system"
      properties:
        jsonClass:
          type: string
          example: "FileSystemSinkSettings"
        path:
          type: string
          description: "Path to the folder or file to write the resources"
          example: "/path/to/folder"
        contentType:
          type: string
          description: "Content type of the sink"
          example: "ndjson"
        numOfPartitions:
          type: integer
          description: "Number of partitions for the file (for distributed fs)"
        options:
          $ref: "#/components/schemas/SparkOptions"
        partitionByResourceType:
          type: boolean
          description: "Flag to determine whether to partition the output files by FHIR resource type."
        partitioningColumns:
          type: object
          description: "A map of resource types to a list of columns to partition by"
          additionalProperties:
            type: array
            items:
              type: string
      required:
        - jsonClass
        - path

    FhirRepositorySinkSettings:
      type: object
      description: "Settings for a FHIR repository to store the mapped resources"
      properties:
        jsonClass:
          type: string
          example: "FhirRepositorySinkSettings"
        fhirRepoUrl:
          type: string
          description: "Path to the folder or file to write the resources"
          example: "http://localhost:8081/fhir"
        securitySettings:
          type: object
          description: "File format if not inferred from the path"
          oneOf:
            - $ref: "#/components/schemas/BearerTokenAuthorizationSettings"
            - $ref: "#/components/schemas/BasicAuthenticationSettings"
            - $ref: "#/components/schemas/FixedTokenAuthenticationSettings"
        returnMinimal:
          type: boolean
          description: "Number of partitions for the file (for distributed fs)"
      required:
        - jsonClass
        - fhirRepoUrl

    BearerTokenAuthorizationSettings:
      type: object
      description: "Security settings for FHIR API access via bearer token"
      properties:
        jsonClass:
          type: string
          description: "Type of the security setting choice"
          example: "BearerTokenAuthorizationSettings"
        clientId:
          type: string
          description: "OpenID Client identifier assigned to toFhir"
        clientSecret:
          type: string
          description: "OpenID Client secret given to toFhir"
        requiredScopes:
          type: array
          items:
            type: string
          description: "List of required scores to write the resources"
        authzServerTokenEndpoint:
          type: string
          description: "Authorization servers token endpoint"
        clientAuthenticationMethod:
          type: string
          description: "Client authentication method"
      required:
        - clientId
        - clientSecret
        - requiredScopes
        - authzServerTokenEndpoint

    BasicAuthenticationSettings:
      type: object
      description: "Security settings for FHIR API access via basic authentication"
      properties:
        jsonClass:
          type: string
          description: "Type of the security setting choice"
        username:
          type: string
          description: "Username for basic authentication"
        password:
          type: string
          description: "Password for basic authentication"
      required:
        - username
        - password

    FixedTokenAuthenticationSettings:
      type: object
      description: "Security settings for FHIR API access via fixed token"
      properties:
        jsonClass:
          type: string
          description: "Type of the security setting choice"
        token:
          type: string
          description: "The fixed token"
      required:
        - token

    ImportSchemaSettings:
      type: object
      properties:
        baseUrl:
          type: string
          description: "The base URL of the FHIR server from which to import the schema."
          example: "https://fhir.server.com"
        resourceId:
          type: string
          description: "The ID of the resource representing the schema i.e. StructureDefinition to be imported."
        securitySettings:
          $ref: '#/components/schemas/FhirRepositorySinkSettings'
      required:
        - baseUrl
        - resourceId

    LocalFhirTerminologyServiceSettings:
      type: object
      description: "A local terminology service where each concept map is provided via a CSV file"
      properties:
        jsonClass:
          type: string
          description: "Type of the terminology service, (remote or local)"
          example: "LocalFhirTerminologyServiceSettings"
        folderPath:
          type: string
          description: "Path to the folder that all concept map files exists"
          example: "D:/codes/onfhir-io/tofhir/data"
        conceptMapFiles:
          type: array
          items:
            $ref: '#/components/schemas/ConceptMapFile'
        codeSystemFiles:
          type: array
          items:
            $ref: '#/components/schemas/CodeSystemFile'
      required:
        - folderPath

    ConceptMapFile:
      type: object
      description: "Metadata for a Concept map file for toFhir local terminology service"
      properties:
        id:
          type: string
          description: "unique id"
        name:
          type: string
          description: "Name of the file"
        conceptMapUrl:
          type: string
          description: "Corresponding concept map url e.g. http://cds-hooks.hl7.org/ConceptMap/indicator-to-request-priority"
        sourceValueSetUrl:
          type: string
          description: "Url for Source value set"
        targetValueSetUrl:
          type: string
          description: "Url for Target value set"
      required:
        - name
        - conceptMapUrl
        - sourceValueSetUrl
        - targetValueSetUrl

    CodeSystemFile:
      type: object
      description: "Metadata for a code system file  for toFhir local terminology service"
      properties:
        id:
          type: string
          description: "unique id"
        name:
          type: string
          description: "Name of the file"
        codeSystem:
          type: string
          description: "Corresponding code system url"
      required:
        - id
        - name
        - codeSystem

    MappingTask:
      description: "FHIR Mapping task instance"
      type: object
      properties:
        name:
          type: string
          description: "Name of the given FhirMappingTask"
          example: "example"
        mappingRef:
          type: string
          description: "Canonical URL of the FhirMapping definition to execute"
          example: "https://aiccelerate.eu/fhir/mappings/pilot1/patient-mapping"
        sourceBinding:
          type: object
          description: "Provide details how to load each source data for the mapping"
          additionalProperties:
            oneOf:
              - $ref: "#/components/schemas/FileSystemSource"
              - $ref: "#/components/schemas/SqlSource"
              - $ref: "#/components/schemas/KafkaSource"
              - $ref: "#/components/schemas/FhirServerSource"

    SchedulingSettings:
      type: object
      description: "Cron expression showing the times of scheduled task needed. More info: https://www.sauronsoftware.it/projects/cron4j/"
      properties:
        cronExpression:
          type: string
          description: "A UNIX crontab-like pattern is a string split in five space separated parts"
        jsonClass:
          type: string
          description: "Specifies the class of this object."
          example: "SchedulingSettings"
      required:
        - cronExpression

    DataProcessingSettings:
      type: object
      description: "Data source processing settings"
      properties:
        saveErroneousRecords:
          type: boolean
          description: "If true, erroneous records will be saved to archive folder with the same path as the input file"
        archiveMode:
          $ref: "#/components/schemas/ArchiveModes"
      required:
        - saveErroneousRecords
        - archiveMode

    ArchiveModes:
      type: string
      enum:
        - off
        - delete
        - archive

    ExecuteJobTask:
      type: object
      description: "The data transfer object to keep mappingTask names to be executed and corresponding mapping error handling."
      properties:
        clearCheckpoints:
          type: boolean
        mappingTaskNames:
          description: "mapping names of the mappingTask's that to be executed"
          type: array
          items:
            type: string

    Execution:
      type: object
      description: Executions of a mapping job
      properties:
        id:
          type: string
          description: "Identifier of the execution"
          example: "c531d5b0-40fc-42a9-8f2d-c6105e3a5d39"
      oneOf:
        - properties:
            runningStatus:
              type: boolean
              description: "Indicates whether the job is currently running"
              example: true
        - properties:
            scheduled:
              type: boolean
              description: "Indicates whether the job is scheduled"
              example: true

    TestResourceCreationRequest:
      type: object
      description: "FhirMappingTask and resource filter to test a mapping"
      properties:
        fhirMappingTask:
          allOf:
            - $ref: "#/components/schemas/MappingTask"
            - type: object
              properties:
                mapping:
                  $ref: "#/components/schemas/FhirMapping"
          description: "task to be used for testing"
        resourceFilter:
          $ref: "#/components/schemas/ResourceFilter"

    ResourceFilter:
      description: "Resource filter config for testing a mapping"
      properties:
        numberOfRows:
          type: integer
          description: "number of rows to select"
          example: 10
        order:
          type: string
          description: "order of rows to select"
          example: "start"

    FhirPathFunction:
      type: object
      description: "the documentations of FhirPath functions"
      properties:
        documentation:
          type: string
        insertText:
          type: string
        detail:
          type: string
        label:
          type: string
        kind:
          type: string
        returnType:
          type: array
          items:
            type: string
        inputType:
          type: array
          items:
            type: string

    FilePathNode:
      type: object
      description: "Represent each file/folder in the file system, with the root being the context path where toFHIR runs."
      properties:
        label:
          type: string
        isFolder:
          type: boolean
        children:
          type: array
          items:
            $ref: '#/components/schemas/FilePathNode'

    Metadata:
      type: object
      description: "Model that represents the metadata of the server."
      properties:
        name:
          type: string
          description: "The name of the server."
        description:
          type: string
          description: "A description of the server."
        version:
          type: string
          description: "The current version of the server."
        majorFhirVersion:
          type: string
          description: "The major FHIR version of definitions (profiles, valuesets, codesystems) supported by the server."
        toFhirRedcapVersion:
          type: string
          description: "The optional toFHIR-Redcap server version."
        definitionsRootUrls:
          type: array
          items:
            type: string
          description: "Optional list of root URLs for definitions."
        schemasFhirVersion:
          type: string
          description: "The FHIR version used for schemas."
        repositoryNames:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/RepositoryNames'
          description: "The configured repository names."
        archiving:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Archiving'
          description: "The archiving configuration."


    RepositoryNames:
      type: object
      description: "Represents the configured repository names included in the metadata."
      properties:
        mappings:
          type: string
          description: "The path to the folder where the mappings are kept."
        schemas:
          type: string
          description: "The path to the folder where the schema definitions are kept."
        contexts:
          type: string
          description: "The path to the folder where the mapping context files are kept."
        jobs:
          type: string
          description: "The path to the folder where the job definitions are kept."
        terminologySystems:
          type: string
          description: "The path to the folder where the terminology system definitions are kept."

    Archiving:
      type: object
      description: "Represents the archiving configurations included in the metadata."
      properties:
        erroneousRecordsFolder:
          type: string
          description: "The parent folder where the data sources of errors received while running mapping are stored."
        archiveFolder:
          type: string
          description: "The folder path where the archive of the processed source data is stored."
        streamArchivingFrequency:
          type: number
          description: "The period (in milliseconds) to run the archiving task for file streaming jobs."

    CsvHeader:
      type: object
      description: Header of a csv column
      properties:
        currentName:
          type: string
          description: "The current name of the header."
          example: "patient-id"
        previousName:
          type: string
          description: "The previously saved name of the header, used for column name change without data loss"
          example: "id"

    # Fields that is used while editing a project
    PatchProjectSchema:
      type: object
      properties:
        description:
          type: string
          description: "A detailed description of the project."
          example: "This project is aimed at ..."
        schemaUrlPrefix:
          type: string
          description: "Prefix (beginning) of the URLs to be used while creating schema definitions within this project."
          example: "https://aiccelerate.eu/fhir/StructureDefinition/"
        mappingUrlPrefix:
          type: string
          description: "Prefix (beginning) of the URLs to be used while creating mapping definitions within this project."
          example: "https://aiccelerate.eu/fhir/mappings/pilot1/"

    SparkOptions:
      type: object
      description: Options used by Spark while reading data from File system, SQL or Kafka
      additionalProperties:
        type: string

    RedCapProjectConfig:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the REDCap project.
        token:
          type: string
          description: The API token used for authentication with REDCap.
      required:
        - id
        - token

  # HTTP responses for requests
  responses:
    400BadRequest:
      description: "Bad or Invalid request"
    409AlreadyExists:
      description: "Given object already exists"
    404NotFound:
      description: "Given resource does not exist"
    415UnsupportedMediaType:
      description: "Given resource is not a valid application/json instance"
    500InternalServerError:
      description: "An unexpected error occurred on the server."

  # Path and query parameters for requests
  parameters:
    projectId:
      in: path
      name: "projectId"
      required: true
      schema:
        type: string
      description: "Identifier of the project"

    schemaId:
      in: path
      name: "schemaId"
      required: true
      schema:
        type: string
      description: "Identifier of the schema"

    format:
      in: query
      name: "format"
      schema:
        type: string
        enum: [ "StructureDefinition", "SimpleStructureDefinition" ]
      description: "Requested format of the schema"

    schemaUrl:
      in: query
      name: url
      schema:
        type: string
        format: url
      description: "Url of the schema"
      example: "https://aiccelerate.eu/fhir/StructureDefinition/Ext-plt1-anesthesia-observations"

    rootUrl:
      in: query
      name: "rootUrl"
      schema:
        type: string
        format: url
      required: true
      description: "The root url of schemas to be created"

    mappingId:
      in: path
      name: "mappingId"
      schema:
        type: string
      required: true
      description: "Identifier of the mapping"

    jobId:
      in: path
      name: "jobId"
      schema:
        type: string
      required: true
      description: "Identifier of the job"

    executionId:
      name: executionId
      in: path
      required: true
      schema:
        type: string

    mappingTaskName:
      in: path
      name: "mappingTaskName"
      schema:
        type: string
        format: url
      required: true
      description: "Name of a mappingTask"

    mappingContextId:
      in: path
      name: "mappingContextId"
      schema:
        type: string
        format: file name
      required: true
      description: "Identifier of the mapping context"

    terminologyId:
      in: path
      name: "terminologyId"
      required: true
      schema:
        type: string
      description: "Identifier of the terminology"

    conceptMapId:
      in: path
      name: "conceptMapId"
      required: true
      schema:
        type: string
      description: "Identifier of the concept map"

    codeSystemId:
      in: path
      name: "codeSystemId"
      required: true
      schema:
        type: string
      description: "Identifier of the code system"

    q:
      name: q
      in: query
      required: true
      description: Query parameter
      schema:
        type: string
        enum:
          - rtypes
          - profiles
          - elements

    rtype:
      name: rtype
      in: query
      description: Resource type (required for profiles query)
      schema:
        type: string

    profile:
      name: profile
      in: query
      description: Profile URL (required for elements query)
      schema:
        type: string

    fhirValidationUrl:
      name: fhirValidationUrl
      in: query
      required: true
      description: FHIR validation URL
      schema:
        type: string
    
    base_path:
      name: base_path
      in: query
      required: false
      description: The base path of the file system from which to retrieve the folder tree structure. Defaults to the root ("/").
      schema:
        type: string
        default: "/"
    
    fhirVersion:
      name: fhirVersion
      in: query
      required: true
      description: Major FHIR version (must be either R4 or R5)
      schema:
        type: string
        enum:
          - R4
          - R5
    
    include_files:
      name: include_files
      in: query
      required: false
      description: Boolean flag indicating whether to include files in the folder tree structure. Defaults to `false`.
      schema:
        type: boolean
        default: false

  # Examples to use in the swagger api
  examples:
    # Example for FhirMappingExpression structure
    FhirExpressionExample:
      value:
        name: "result"
        language: "en"
        value:
          '{{#ind}}': '{{utl:evaluateExpression(utl:indices(1, 65).select(''iif(v'' & $this.toString() & ''.exists(), '' & $this.toString() & '', {})'').mkString('' | '')).select(''v'' & $this.toString())}}'
          '{{*}}':
            resourceType: Observation
            id: '{{mpp:getHashedId(''Observation'', pid & %ind & time.toString())}}'
            meta:
              profile:
                - https://aiccelerate.eu/fhir/StructureDefinition/AIC-AnesthesiaObservation
              source: '{{%sourceSystem.sourceUri}}'
            status: final
            code:
              coding:
                - system: '{{mpp:getConcept(%anstObsConceptMap, %ind, ''target_system'')}}'
                  code: '{{mpp:getConcept(%anstObsConceptMap, %ind, ''target_code'')}}'
                  display: '{{mpp:getConcept(%anstObsConceptMap, %ind, ''target_display'')}}'
            subject: '{{mpp:createFhirReferenceWithHashedId(''Patient'', pid)}}'
            encounter: '{{? mpp:createFhirReferenceWithHashedId(''Encounter'', encounterId)}}'
            effectiveDateTime: '{{time}}'
            valueQuantity:
              value: '{{utl:evaluateExpression(%ind)}}'
              unit: '{{mpp:getConcept(%anstObsConceptMap, %ind, ''target_unit'')}}'
              system: http://unitsofmeasure.org
              code: '{{mpp:getConcept(%anstObsConceptMap, %ind, ''target_unit'')}}'

    # Example response for the path: POST, /projects/{projectId}/jobs/{jobId}/test
    FhirValidationExample:
      value:
        resourceType: OperationOutcome
        issue:
          - severity: information
            code: informational
            diagnostics: All OK :)
            expression: []
          - severity: warning
            code: invalid
            diagnostics: '[Validating against ''https://aiccelerate.eu/fhir/StructureDefinition/AIC-AnesthesiaObservation''] => Constraint ''dom-6'' is not satisfied for the given value! Constraint Description: ''A resource should have narrative for robust management''. FHIR Path expression: ''text.`div`.exists()'''
            expression:
              - $this

    # Example response for the path: GET, /fhir-path-functions
    FhirPathFunctionsExample:
      value:
        - documentation: Generates an UUID
          insertText: utl:uuid()
          detail: utl
          label: utl:uuid
          kind: 1
          returnType:
            - string
          inputType: []
        - documentation: 'Returns the input string with all instances of pattern replaced with substitution. Ex: ''abcdefg''.replace(''cde'', ''123'')'
          insertText: replace(<patternExpr>,<substitutionExpr>)
          detail: ''
          label: replace
          kind: 0
          returnType:
            - string
          inputType:
            - string

    # Example response for the path: GET, /file-system-path
    FilePathNodeExample:
      value:
        label: test-data
        isFolder: true
        children:
          - label: icrc
            isFolder: true
            children:
              - label: encounters.csv
                isFolder: false
                children: []
              - label: patients.csv
                isFolder: false
                children: []
          - label: ucl
            isFolder: true
            children:
              - label: OBSERVATION.csv
                isFolder: false
                children: []
              - label: PERSON.csv
                isFolder: false
                children: []

    # Example response for the path: GET, /metadata
    MetadataExample:
      value:
        name: toFHIR
        description: toFHIR is a tool for mapping data from various sources to FHIR resources.
        version: 1.1-SNAPSHOT
        toFhirRedcapVersion: 1.1-SNAPSHOT
        majorFhirVersion: R5
        definitionsRootUrls:
          - https://datatools4heart.eu
        schemasFhirVersion: 5.0.0
        repositoryNames:
          mappings: mappings
          schemas: schemas
          contexts: mapping-contexts
          jobs: mapping-jobs
          terminologySystems: terminology-systems
        archiving:
          erroneousRecordsFolder: erroneous-records-folder
          archiveFolder: archive-folder
          streamArchivingFrequency: 5000

    # A simple structure definition example for schema post
    SimpleStructureDefinitionExample:
      value:
        id: Ext-plt1-condition-test
        url: https://aiccelerate.eu/fhir/StructureDefinition/Ext-plt1-condition-test
        type: Ext-plt1-condition-test
        name: Ext-plt1-condition-test
        version: R4
        rootDefinition:
          id: Ext-plt1-condition-test
          path: Ext-plt1-condition-test
          dataTypes:
            - dataType: Element
          isPrimitive: false
          isChoiceRoot: false
          isArray: false
          minCardinality: 0
        fieldDefinitions:
          - id: pid
            path: Ext-plt1-condition-test.pid
            dataTypes:
              - dataType: id
                profiles:
                  - http://hl7.org/fhir/StructureDefinition/id
            isPrimitive: true
            isChoiceRoot: false
            isArray: false
            minCardinality: 1
            maxCardinality: 1
            short: Patient identifier
            definition: Unique patient identifier  (a pseudoynm)
          - id: code
            path: Ext-plt1-condition-test.code
            dataTypes:
              - dataType: code
                profiles:
                  - http://hl7.org/fhir/StructureDefinition/code
            isPrimitive: true
            isChoiceRoot: false
            isArray: false
            minCardinality: 1
            maxCardinality: 1
            short: Condition code
            definition: ICD-10 code for diagnosis
          - id: codeDisplay
            path: Ext-plt1-condition-test.codeDisplay
            dataTypes:
              - dataType: string
                profiles:
                  - http://hl7.org/fhir/StructureDefinition/string
            isPrimitive: true
            isChoiceRoot: false
            isArray: false
            minCardinality: 0
            maxCardinality: 1
            short: Condition name
            definition: Name of the diagnosis
          - id: onsetDateTime
            path: Ext-plt1-condition-test.onsetDateTime
            dataTypes:
              - dataType: dateTime
                profiles:
                  - http://hl7.org/fhir/StructureDefinition/dateTime
            isPrimitive: true
            isChoiceRoot: false
            isArray: false
            minCardinality: 1
            maxCardinality: 1
            short: Condition start date
            definition: 'When this condition is started or diagnosis is set. '
          - id: abatementDateTime
            path: Ext-plt1-condition-test.abatementDateTime
            dataTypes:
              - dataType: dateTime
                profiles:
                  - http://hl7.org/fhir/StructureDefinition/dateTime
            isPrimitive: true
            isChoiceRoot: false
            isArray: false
            minCardinality: 0
            maxCardinality: 1
            short: Condition abatement date
            definition: If the disease is resolved/no longer active, the end date.
          - id: encounterId
            path: Ext-plt1-condition-test.encounterId
            dataTypes:
              - dataType: id
                profiles:
                  - http://hl7.org/fhir/StructureDefinition/id
            isPrimitive: true
            isChoiceRoot: false
            isArray: false
            minCardinality: 0
            maxCardinality: 1
            short: Encounter
            definition: Unique identifier of the visit/encounter that this diagnosis is set (if exists and related)

    # A structure definition example for schema post
    StructureDefinitionExample:
      value:
        resourceType: StructureDefinition
        url: https://aiccelerate.eu/fhir/StructureDefinition/Ext-plt1-operation-episode
        name: Ext-plt1-operation-episode
        status: draft
        fhirVersion: 4.0.1
        kind: logical
        abstract: false
        type: Ext-plt1-operation-episode
        baseDefinition: http://hl7.org/fhir/StructureDefinition/Element
        derivation: specialization
        differential:
          element:
            - id: Ext-plt1-operation-episode
              path: Ext-plt1-operation-episode
              min: 0
              max: '*'
              type:
                - code: Element
            - id: Ext-plt1-operation-episode.pid
              path: Ext-plt1-operation-episode.pid
              short: Patient identifier
              definition: Unique patient identifier  (a pseudoynm)
              min: 1
              max: '1'
              type:
                - code: id
                  profile:
                    - http://hl7.org/fhir/StructureDefinition/id
            - id: Ext-plt1-operation-episode.episodeId
              path: Ext-plt1-operation-episode.episodeId
              short: Episode identifier
              definition: Unique identifier of the episode of care that surgery is performed
              min: 1
              max: '1'
              type:
                - code: id
                  profile:
                    - http://hl7.org/fhir/StructureDefinition/id
    
    # Example response for the path: POST, /terminologies/{terminologyId}/code-systems/{codeSystemId}/header
    CodeSystemCsvHeadersExample:
      summary: "Example of code system headers which is used to update csv headers"
      value:
        - currentName: "code"
          previousName: "code"
        - currentName: "display"
          previousName: "display"
        - currentName: "new_column"
          previousName: "new_column"
        - currentName: "new_name"
          previousName: "old_name"
    
    # Example response for the path: POST, /terminologies/{terminologyId}/concept-maps/{conceptMapId}/header
    ConceptMapCsvHeadersExample:
      summary: "Example of concept map headers which is used to update csv headers"
      value:
        - currentName: "source_system"
          previousName: "source_system"
        - currentName: "source_code"
          previousName: "source_code"
        - currentName: "target_system"
          previousName: "target_system"
        - currentName: "target_code"
          previousName: "target_code"
        - currentName: "new_name"
          previousName: "target_display"
    
    # Example settings to import schema        
    ImportSchemaSettingsExample:
      value:
        baseUrl: "fhir/example"
        resourceId: "structureDefinitionId"
        securitySettings:
          jsonClass: "BasicAuthenticationSettings"
          username: "username"
          password: "password"
    
    # An example of schema field definitions      
    SchemaFieldDefinitionsExample:
      value:
        - id: pid
          path: Ext-plt1-anesthesia-observations.pid
          dataTypes:
            - dataType: id
              profiles:
                - http://hl7.org/fhir/StructureDefinition/id
          isPrimitive: true
          isChoiceRoot: false
          isArray: false
          minCardinality: 1
          maxCardinality: 1
          short: Patient identifier
          definition: Unique patient identifier (a pseudonym)
          elements: [ ]
        - id: encounterId
          path: Ext-plt1-anesthesia-observations.encounterId
          dataTypes:
            - dataType: id
              profiles:
                - http://hl7.org/fhir/StructureDefinition/id
          isPrimitive: true
          isChoiceRoot: false
          isArray: false
          minCardinality: 1
          maxCardinality: 1
          short: Encounter id
          definition: Reference to the encounter that this assessment is done
          elements: [ ]
        - id: time
          path: Ext-plt1-anesthesia-observations.time
          dataTypes:
            - dataType: dateTime
              profiles:
                - http://hl7.org/fhir/StructureDefinition/dateTime
          isPrimitive: true
          isChoiceRoot: false
          isArray: false
          minCardinality: 1
          maxCardinality: 1
          short: Time of evaluation
          definition: Date or dateTime that this evaluation is done
          elements: [ ]
        - id: v1
          path: Ext-plt1-anesthesia-observations.v1
          dataTypes:
            - dataType: decimal
              profiles:
                - http://hl7.org/fhir/StructureDefinition/decimal
          isPrimitive: true
          isChoiceRoot: false
          isArray: false
          minCardinality: 0
          maxCardinality: 1
          short: FiSevofl (%)
          definition: FiSevofl (%)
          elements: [ ]
        - id: v2
          path: Ext-plt1-anesthesia-observations.v2
          dataTypes:
            - dataType: decimal
              profiles:
                - http://hl7.org/fhir/StructureDefinition/decimal
          isPrimitive: true
          isChoiceRoot: false
          isArray: false
          minCardinality: 0
          maxCardinality: 1
          short: FiDesfl (%)
          definition: FiDesfl (%)
          elements: [ ]
    
    FhirMappingJobExample:
      value:
        id: "test-name"
        name: "test-name"
        useFhirSinkAsIdentityService: false
        sourceSettings:
          source1:
            name: "source1"
            sourceUri: "suri"
            asStream: false
            jsonClass: "FileSystemSourceSettings"
            dataFolderPath: "test-data"
          source2:
            name: "source2"
            sourceUri: "suri"
            jsonClass: "SqlSourceSettings"
            databaseUrl: "dat"
            username: "us"
            password: "pas"
          source3:
            name: "source3"
            sourceUri: "suri"
            asStream: true
            jsonClass: "KafkaSourceSettings"
            asRedCap: false
            bootstrapServers: "bootstrap"
          source4:
            name: "source4"
            sourceUri: "suri"
            jsonClass: "FhirServerSourceSettings"
            serverUrl: "fhirla"
            securitySettings:
              jsonClass: "BasicAuthenticationSettings"
              username: "us"
              password: "pas"
        sinkSettings:
          jsonClass: "FileSystemSinkSettings"
          path: "/path/to/folder"
          contentType: "ndjson"
          options:
            ignoreCorruptFiles: "val"
            ignoreMissingFiles: "val"
        terminologyServiceSettings:
          jsonClass: "FhirRepositorySinkSettings"
          fhirRepoUrl: "terminology-service"
          securitySettings:
            jsonClass: "FixedTokenAuthenticationSettings"
            token: "token"
        identityServiceSettings:
          jsonClass: "FhirRepositorySinkSettings"
          fhirRepoUrl: "idi"
          securitySettings:
            jsonClass: "BasicAuthenticationSettings"
            username: "us"
            password: "pas"
        mappings:
          - name: "example-mapping-1"
            mappingRef: "https://aiccelerate.eu/fhir/mappings/pilot1/surgery-details-mapping"
            sourceBinding:
              source:
                sourceRef: "source1"
                jsonClass: "FileSystemSource"
                options:
                  ignoreCorruptFiles: "val"
                path: "pilot1"
                contentType: "csv"
          - name: "example-mapping-2"
            mappingRef: "https://aiccelerate.eu/fhir/mappings/pilot1/medication-administration-mapping"
            sourceBinding:
              source:
                sourceRef: "source2"
                jsonClass: "SqlSource"
                options:
                  prepareQuery: "q"
                tableName: "table"
              s1:
                sourceRef: "source2"
                jsonClass: "SqlSource"
                options:
                  prepareQuery: "q"
                query: "query"
          - name: "example-mapping-3"
            mappingRef: "https://aiccelerate.eu/fhir/mappings/pilot1/medication-used-mapping"
            sourceBinding:
              source:
                sourceRef: "source3"
                jsonClass: "KafkaSource"
                topicName: "topic"
                options:
                  startingOffsets: "latest"
                  maxFilesPerTrigger: "1"
          - name: "example-mapping-4"
            mappingRef: "https://aiccelerate.eu/fhir/mappings/pilot1/preoperative-risks-mapping"
            sourceBinding:
              source:
                sourceRef: "source4"
                jsonClass: "FhirServerSource"
                resourceType: "resource"
                query: "query"
        dataProcessingSettings:
          saveErroneousRecords: true
          archiveMode: "delete"
        schedulingSettings: null 